// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20240731003034_AddMigrationInicial")]
    partial class AddMigrationInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entidades.Agenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AgendamentoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_agendamento");

                    b.Property<DateTime>("DataAgendamento")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_agendamento");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_medico");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status_agendamento");

                    b.HasKey("Id");

                    b.HasAlternateKey("DataAgendamento");

                    b.HasIndex("MedicoId");

                    b.ToTable("Agenda", (string)null);
                });

            modelBuilder.Entity("Domain.Entidades.Agendamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AgendaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_agenda");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_paciente");

                    b.HasKey("Id");

                    b.HasIndex("AgendaId")
                        .IsUnique();

                    b.HasIndex("PacienteId");

                    b.ToTable("Agendamento", (string)null);
                });

            modelBuilder.Entity("Domain.Entidades.Medico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("crm");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("criado_em");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("documento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("senha");

                    b.HasKey("Id");

                    b.HasAlternateKey("Documento", "Crm");

                    b.ToTable("Medico", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("criado_em");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("documento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("senha");

                    b.HasKey("Id");

                    b.HasAlternateKey("Documento");

                    b.ToTable("Paciente", (string)null);
                });

            modelBuilder.Entity("Domain.Entidades.Agenda", b =>
                {
                    b.HasOne("Domain.Entidades.Medico", "Medico")
                        .WithMany("Agendas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("Domain.Entidades.Agendamento", b =>
                {
                    b.HasOne("Domain.Entidades.Agenda", "AgendaMedico")
                        .WithOne("AgendamentoPaciente")
                        .HasForeignKey("Domain.Entidades.Agendamento", "AgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Paciente", "Paciente")
                        .WithMany("Agendamentos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgendaMedico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Domain.Entidades.Agenda", b =>
                {
                    b.Navigation("AgendamentoPaciente");
                });

            modelBuilder.Entity("Domain.Entidades.Medico", b =>
                {
                    b.Navigation("Agendas");
                });

            modelBuilder.Entity("Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Agendamentos");
                });
#pragma warning restore 612, 618
        }
    }
}
